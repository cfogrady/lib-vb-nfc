package com.github.cfogrady.vbnfc

import com.github.cfogrady.vbnfc.be.BENfcDataTranslator
import io.mockk.every
import io.mockk.mockkStatic
import org.junit.Assert
import org.junit.Test
import java.nio.ByteOrder

class CryptographicTransformerTest {

    val testTagId = byteArrayOf(0x04, 0x40, 0xaf.toByte(), 0xa2.toByte(), 0xee.toByte(), 0x0f, 0x90.toByte())

    val testAesKey = "8A4PEGIXJS454EFRTX9F5PCT"
    val testHmacKey1 = "40nz2LdPI99D+x748XmQmw=="
    val testHmacKey2 = "5Jz9lWtNg28qxqIBoR5kLw=="
    val testSubstitutionCipher = intArrayOf(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

    @OptIn(ExperimentalStdlibApi::class)
    @Test
    fun createPasswordCreatesExpectedPassword() {

        mockkStatic(android.util.Log::class)
        every { android.util.Log.i(any<String>(), any<String>()) } answers {
            val message = it.invocation.args[1] as String
            println(message)
            1
        }

        val cryptographicTransformer = CryptographicTransformer(testHmacKey1, testHmacKey2, testAesKey, testSubstitutionCipher)

        val result = cryptographicTransformer.createNfcPassword(testTagId)
        val expected = "a3c83dd7"

        Assert.assertEquals(expected, result.toHexString())
    }

    @OptIn(ExperimentalStdlibApi::class)
    @Test
    fun dataEncryptionAndDecryptionWorks() {
        val cryptographicTransformer = CryptographicTransformer(testHmacKey1, testHmacKey2, testAesKey, testSubstitutionCipher)

        val characters = listOf(
            "000000000000000000000000000000000000000000000000000000000000000010400010040010001000000000001094104000100400100010000000000010940000000000000000000400840203008d0000000000000000000400840203008d00000006000300060003000001010014000000060003000600030000010100140156025309850000000000000000d6100156025309850000000000000000d610000000000000280000000000000000280000000000000000030c08302402279424022624022524022424022324020151002402290124022904240229000000f2ffffffffffffffffffffffff000000f4ffffffffffffffff00000000000000f80000000000000000000014860000009a0000000000000000000014860000009a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003eab5bd7cc1146490000000000000087b49b818354a1e7020000000001010033000000000000000000000000000000000000000000000000000000000000000014c5400000000000000000000000001914c
            "000000000000000000000000000000000000000000000000000000000000000010400010040010001000000000001094104000100400100010000000000010940000000000000000000500820302008c0000000000000000000500820302008c000b00030002000b000b000001010028000b00030002000b000b0000010100280464028b04b4000000000000000308b80464028b04b4000000000000000308b80474000000001500000000000000008d0002000000000000000000002401062d240105240104240103240102240101c80024010601240106042401060000008605240116ffffffffffffffff00000038ffffffffffffffff00000000000000f80005000f000a00000000046b0000008d0005000f000a00000000046b0000008d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ab6a684ca5426c0000000000000021d6ae1e1575ea9290000000000101003a000000000000000000000000000000000000000000000000000000000000000014c5400000000000000000000000001914c
        )
        val expectedEncryptions = listOf(
            "74b46e2d78292ce251a84e644f5451dd4aa2c6d782a9aeef2c3229103c7a26e5d9c2c53d2f63077a1cf9ae18efc382edca9e50d7d861e2927cd9df2494a0772ff1b8791bae7883a862d218559277db6a9665f18da0f1caa92ccc903dbc80e66367ee39b2f243cc0b5bfcc2131dfeb9d361179d4033517c4ebbceea15ab9bfb27a9a05cb45e5dfe37287a010db3bcfd9a6f1cc54a31ea7da193dbd341e83997ad80713d5fd19c7d76a6dbedfb25049ab5472e4094d0949f19c853b2ac6c6827412904fd1683fae61ea1a64508e9243e04bdfdee63ff98321204fd4fd2a17112c0bd5aa7c11986ea7bc00110dedea2d0644ea5ea3f6e928f8c6c98107eeedbfd1b774d07df237dc294f3b8fccaa8ab2e1c59de2c695f367214f55accc2e43ca0b2c021161d3c8b9ea2405717d6884d089d848d82b37a9ed711a8e9809336d05bab0091face97671e9260d4ae741e94ef1f8d950ff390dd05bfa28adb6b72a82141ad1409dc3f7df1e3da69dce0707d3d9242d2689e5751a87c1123ad25d37349bf7d5777723f1acb56d2f96ba435ffa505c3ae3d270c85bcb64aabac0d15d8128f7fe34cc303a74f8d42871a25d452a1ef033b824b17e51b808b5363f2f1da5a57c3fcc881b57028e76155f6d49e35e43bd142747c3a4a14217fa8600a6e0d3cdbc6b5598510023ad0897d38ca04e78a78e198ee76e784d6337ad8fa65e4b617ea11433fb3d9d7d3269a7b5e1ff9a4cd723f3fc4f81768816619fadf21b5276f31d704bba1a3a9afb0363cca3ddb272bdced2d252e21824d2828b7c36cdd37202cd5a6b5224e505f87188d3c63af33c8916aa8ae0116dd1028c370236591a4413559fe40d14dcdf72959a122def9b4c6cf5d928142a66b0dcf0ffa5d447b53a8661e3578a49d632e0285d180814116a3e78fc00fc01106a248af8afa329a69054b827e41a62abdc65074554fa2f07b773d56bae73252efa374f47397c1d36e056eb9d32b6dcf18f40669a5b23723c475c50c5ba4154b550c67dd90d4a6919686c69fdcfd7d4d988a0df5e420b6240068ae8aa07c88c38bac3b6ce7a87c8df0f540cc3c5be2180b70127c523102ed9be2cfb25a032089d47d05db6dbde2758239ad54b94756906922ed7e7c4ecf6b256c658417fa8003100c72de1dee627c1a0c670dbc91596e4dc0d4393eb24884b41979e8ff3d5b0583416750d1d856a2a689cd",
            "74b46e2d78292ce251a84e644f5451dd4aa2c6d782a9aeef2c3229103c7a26e5d9c2c53d2f63077a1cf9ae18efc382edca9e50d7d861e2927cd9df2494a0772ff1b8791bae7883a862d318539376db6b9665f18da0f1caa92ccd903bbd81e66267e539b7f242cc065bf4c2131dfeb9ef611c9d4533507c43bbc6ea15ab9bfb1bac925c6c536cfe37287a010db3bf23326a2ec5923cdb7da193dbd341e83a490584053d5fd19c4076a6dbedfb25049a10472c4094d0949f19cb5fba9c6c6b06f82907de1680dbe61d86a64629e9273e9dbdfded4cff98313d04fd4cfda17112b4478159281986ea7bc00110dedea2d0a84ea5ea3f6e928f8c6c98107eeedbfd1b774807d02377c294f3b8ec27a8ab2e0b59db2c665f3c7214f55adc2fe43ca0a5c021161d3c8b9ea2405717d6884d089d848d82b37a9ed711a8e9809336d05bab0091face97671e9260d4ae741e94ef1f8d950ff390dd05bfa28adb6b72a8214196143863bfc9f5c6da69dce0707d3d3420e7f708761addee1123ad25d37349b67d5777723f1acb56d2f96ba435ffa505c3ae3d270c85bcb64aabac0d15d8128f7fe34cc303a74f8d42871a25d452a1ef033b824b17e51b808b5363f2f1da5a57c3fcc881b57028e76155f6d49e35e43bd142747c3a4a14217fa8600a6e0d3cdbc6b5598510023ad0897d38ca04e78a78e198ee76e784d6337ad8fa65e4b617ea11433fb3d9d7d3269a7b5e1ff9a4cd723f3fc4f81768816619fadf21b5276f31d704bba1a3a9afb0363cca3ddb272bdced2d252e21824d2828b7c36cdd37202cd5a6b5224e505f87188d3c63af33c8916aa8ae0116dd1028c370236591a4413559fe40d14dcdf72959a122def9b4c6cf5d928142a66b0dcf0ffa5d447b53a8661e3578a49d632e0285d180814116a3e78fc00fc01106a248af8afa329a69054b827e41a62abdc65074554fa2f07b773d56bae73252efa374f47397c1d36e056eb9d32b6dcf18f40669a5b23723c475c50c5ba4154b550c67dd90d4a6919686c69fdcfd7d4d988a0df5e420b6240068ae8aa07c88c38bac3b6ce7a87c8df0f540cc3c5be2180b70127c523102ed9be2cfb25a032089d47d05db6dbde2758239ad54b94756906922ed7e7c4ecf6b256c658417fa8003100c72de1dee627c1a0c670dbc91596e4dc0d4393eb24884b41979e8ff3d5b0583416750d1d856a2a689cd",
        )
        for (i in characters.indices) {
            val encrypted = cryptographicTransformer.encryptData(characters[i].hexToByteArray(), testTagId)
            println("Encrypted: ${encrypted.toHexString()}")
            Assert.assertEquals(expectedEncryptions[i], encrypted.toHexString())
            val decrypted = cryptographicTransformer.decryptData(encrypted, testTagId)
            Assert.assertEquals(characters[i], decrypted.toHexString())
        }
    }

    @OptIn(ExperimentalStdlibApi::class)
    @Test
    fun validateDataDecryption() {
        mockkStatic(android.util.Log::class)
        every { android.util.Log.i(any<String>(), any<String>()) } answers {
            val message = it.invocation.args[1] as String
            println(message)
            1
        }

        val cryptographicTransformer = VBBECryptographicTransformer
        val checksumCalculator = ChecksumCalculator()
        val translator = BENfcDataTranslator(cryptographicTransformer)

        // val pagesOfInterest = listOf<IntRange>(8..223) // everything
        // val pagesOfInterest = listOf<IntRange>(24..103) // character data
        // val pagesOfInterest = listOf<IntRange>(40..47, 74..79) // same character data
        val pagesOfInterest = listOf<IntRange>(
            24..27,
            32..35,
            40..43,
            48..67,
            96..103
            )

        println("Falcomon")
        var character = "551abd291a96404cb38cd99babe1184b43eb2479a65c59ebd7e0f3246845a54c5f9dc34770bc69e18ba7bc147c18516f3524c78631f16496e4492e97f74a289105d83d6cf1908eb66565fd4018986ef20862ce4a9376efcb001da75135c5c3fd93f4b9dad14d46c92f192c8e39cbd669c72f27d273a6ddcf554203761924dc1697f5e592c01dcdcc335a4f3eb89cd478907449b3401c0ae9cd0c56cc140a35dcc3dc9ad17a475ac884129d662e4525c14349d1ce507d59a34b1dbe60d1f7d8842da3f1f4604710eef661c3de5291cf33e5569e5abacf9b601d45eee68a7b6eaff0f21724e90cad6b721244d57d78da67d735a0e73deb431d6fb1b8fb755787ee51e8a20da957f97d62c408e6572f865be94aca43fa19116ac318fd2700f093011438f47eaac2e85d538042ff93ce6bc333589f6d341555d36fbba74567ef613d2242c9471f2ed7aa3e565cecd46fa2ca8f88a022c714fc04f0f69c43e74af7ad7bdec18794d9bc03e2e06773a54c3ddbfe76ee5f96845293ef8fc68653831c405edbd8594a620502cb506770a89ba999d4df0d23c40d021e7c2e7159d2f380cbeb77c5d97c9b503503e7dbbae37c42a4a2a4985cabbbc979d42aaac4651c95c41dc4b0baec7d7199e9d929836e13d3e3f8c958facb305f339992162ab0258b42dfa4a02ad3ec28d48c60909e008c5fb2b2e976942784e098313d75e8a6eec78d559aa2617c35574c7a0c5f8f7e103c77087b213d6b02c444a1fb4eab23a967ddac02f9b959675c69f3c97894929c4d5a2779444b05246da35744aab4b545eefc9478620d6e1fb584a9f79080236e005cf738228c104570c200e11b6307a2d236c6031b0f89da38ce1b401eed4dda2b78268d316115b2e9c222441d9cd8d4b559adb9f1ce4a8f2a0ed3f55034e47c778d85654ac1e5048326827f0db6103cfcce491d6bf084a9e7ee2a1446c616c87f1246fb2da22a6eaae4167814f24230aed64e342cae18742c21e4b2f2c600ce783f7ec33f6937a2224a366cd1feb53011e766d0d5459d1b83a1a9147be8ddc8fea75bbdeac18077aaa469898354ff400608e2dac32be82ff7528252c0da681d2fe78150f6020c3691b5cc6cb81285f6716acf0040b346d1b76cd61bc08377f67a8adc341ceda34585ddefeee1dfc416d05067015984e3619bcbc188d8d49ab4024c9e1b83a6c0fd91b4e835d59b3f59d97d"
        var characterData = character.hexToByteArray()
        var result = cryptographicTransformer.decryptData(characterData, testTagId)
        println("Decrypted: ${result.toHexString()}")
        checksumCalculator.checkChecksums(result)
        var nfcCharacter = translator.parseNfcCharacter(result)
        println(nfcCharacter)
        printShortData(result, pagesOfInterest)
        printByteData(result, pagesOfInterest)
        validateCopies(result)
        println("Gaogamon")
        character = "551abd291a96404cb38cd99babe1184b43eb2479a65c59ebd7e0f3246845a54c5f9dc34770bc69e18ba7bc147c18516f3524c78631f16496e4492e97f74a289105d83d6cf1908eb66564fd4619996ef30862ce4a9376efcb001ca75734c4c3fc93ffb9dfd14c46c42f112c8e39cbd655c72427d773a7ddc2554a03761924dc2a92c7e54acd2ccdcc335a4f3eb89f0ad09546496b4d2d0ae9cd0c56cc1409eb74c7a89ad17a4767c884129d662e452564434bd1ce507d59a34811b650d1f4f93d2da0d2f4636610edd161c0ff5292cfaae5569d75bacf984f1d45edc98a7b6edb0a29e9cde90cad6b721244d57d78daabd735a0e73deb431d6fb1b8fb755787ee51eda202a95df97d62c4180b572f864ce94fca4cfa13116ac318edca00f093161438f47eaac2e85d538042ff93ce6bc333589f6d341555d36fbba74567ef613d2242c9471f2ed7aa3e565cecd46fa2ca8f88a022c714fc04f0f69c43e74af7ad40def038146db826e2e06773a54c3d7d9c4371c9b7cf2701ef8fc68653831c495edbd8594a620502cb506770a89ba999d4df0d23c40d021e7c2e7159d2f380cbeb77c5d97c9b503503e7dbbae37c42a4a2a4985cabbbc979d42aaac4651c95c41dc4b0baec7d7199e9d929836e13d3e3f8c958facb305f339992162ab0258b42dfa4a02ad3ec28d48c60909e008c5fb2b2e976942784e098313d75e8a6eec78d559aa2617c35574c7a0c5f8f7e103c77087b213d6b02c444a1fb4eab23a967ddac02f9b959675c69f3c97894929c4d5a2779444b05246da35744aab4b545eefc9478620d6e1fb584a9f79080236e005cf738228c104570c200e11b6307a2d236c6031b0f89da38ce1b401eed4dda2b78268d316115b2e9c222441d9cd8d4b559adb9f1ce4a8f2a0ed3f55034e47c778d85654ac1e5048326827f0db6103cfcce491d6bf084a9e7ee2a1446c616c87f1246fb2da22a6eaae4167814f24230aed64e342cae18742c21e4b2f2c600ce783f7ec33f6937a2224a366cd1feb53011e766d0d5459d1b83a1a9147be8ddc8fea75bbdeac18077aaa469898354ff400608e2dac32be82ff7528252c0da681d2fe78150f6020c3691b5cc6cb81285f6716acf0040b346d1b76cd61bc08377f67a8adc341ceda34585ddefeee1dfc416d05067015984e3619bcbc188d8d49ab4024c9e1b83a6c0fd91b4e835d59b3f59d97d"
        characterData = character.hexToByteArray()
        result = cryptographicTransformer.decryptData(characterData, testTagId)
        println("Decrypted: ${result.toHexString()}")
        checksumCalculator.checkChecksums(result)
        nfcCharacter = translator.parseNfcCharacter(result)
        println(nfcCharacter)
        printShortData(result, pagesOfInterest)
        printByteData(result, pagesOfInterest)
        validateCopies(result)
        println("Gaogamon (woken up)")
        character = "551abd291a96404cb38cd99babe1184b43eb2479a65c59ebd7e0f3246845a54c5f9dc34770bc69e18ba7bc147c18516f3524c78631f16496e4492e97f74a289105d83d6cf1908eb66564fd4619996ef30862ce4a9376efcb001ca75734c4c3fc93ffb9dfd14c46c42f112c8e39cbd655c72427d773a7ddc2554a03761924dc2a92c7e486cd2ccdcc335a4f3eb89f0306954648a74d2d0ae9cd0c56cc1409e2a2c7a89ad17a4767c884129d662e452564434bd1ce507d59a34811b650d1f4f93d2da0d2f4636610edd161c0ff5292cfaae5569d75bacf984f1d45edc98a7b6edb0a29e9cde90cad6b721244d57d78daabd735a0e73deb431d6fb1b8fb755787ee51eda202a95df97d62c41804572f8647e94fca4cfa13116ac318edc500f0931d1438f47eaac2e85d538042ff93ce6bc333589f6d341555d36fbba74567ef613d2242c9471f2ed7aa3e565cecd46fa2ca8f88a022c714fc04f0f69c43e74af7ad40def038146db826e2e06773a54c3d7d9c4371c9b7cf2701ef8fc68653831c495edbd8594a620502cb506770a89ba999d4df0d23c40d021e7c2e7159d2f380cbeb77c5d97c9b503503e7dbbae37c42a4a2a4985cabbbc979d42aaac4651c95c41dc4b0baec7d7199e9d929836e13d3e3f8c958facb305f339992162ab0258b42dfa4a02ad3ec28d48c60909e008c5fb2b2e976942784e098313d75e8a6eec78d559aa2617c35574c7a0c5f8f7e103c77087b213d6b02c444a1fb4eab23a967ddac02f9b959675c69f3c97894929c4d5a2779444b05246da35744aab4b545eefc9478620d6e1fb584a9f79080236e005cf738228c104570c200e11b6307a2d236c6031b0f89da38ce1b401eed4dda2b78268d316115b2e9c222441d9cd8d4b559adb9f1ce4a8f2a0ed3f55034e47c778d85654ac1e5048326827f0db6103cfcce491d6bf084a9e7ee2a1446c616c87f1246fb2da22a6eaae4167814f24230aed64e342cae18742c21e4b2f2c600ce783f7ec33f6937a2224a366cd1feb53011e766d0d5459d1b83a1a9147be8ddc8fea75bbdeac18077aaa469898354ff400608e2dac32be82ff7528252c0da681d2fe78150f6020c3691b5cc6cb81285f6716acf0040b346d1b76cd61bc08377f67a8adc341ceda34585ddefeee1dfc416d05067015984e3619bcbc188d8d49ab4024c9e1b83a6c0fd91b4e835d59b3f59d97d"
        characterData = character.hexToByteArray()
        result = cryptographicTransformer.decryptData(characterData, testTagId)
        println("Decrypted: ${result.toHexString()}")
        checksumCalculator.checkChecksums(result)
        nfcCharacter = translator.parseNfcCharacter(result)
        println(nfcCharacter)
        printShortData(result, pagesOfInterest)
        printByteData(result, pagesOfInterest)
        validateCopies(result)



    }

    val copies = listOf<IntRange>(16..19, 24..27,32..35, 40..43, 72..75, 112..115)

    fun validateCopies(data: ByteArray) {
        for (range in copies) {
            for(i in (range.first-8)*4..<((range.last+1) - 8) * 4) {
                Assert.assertEquals(data[i], data[i+16])
            }
        }
    }

    fun printByteData(data: ByteArray, pageRanges: List<IntRange> = listOf(8..223)) {
        for(i in data.indices step 4) {
            val page = i/4 + 8
            if (!inRanges(page, pageRanges)) {
                continue
            }
            val pageStr = String.format("%03d", page)
            val stringBuilder = StringBuilder("Page $pageStr: ")
            for(j in 0..<4) {
                val byte = data[i+j].toUByte().toInt()
                stringBuilder.append(String.format("%03d", byte))
                stringBuilder.append("  ")
            }
            println(stringBuilder.toString())
        }
    }

    fun printShortData(data: ByteArray, pageRanges: List<IntRange> = listOf(8..223)) {
        for(i in data.indices step 4) {
            val page = i/4 + 8
            if (!inRanges(page, pageRanges)) {
                continue
            }
            val pageStr = String.format("%03d", page)
            val stringBuilder = StringBuilder("Page $pageStr: ")
            for(j in 0..2 step 2) {
                val value = data.sliceArray(i+j..<i+j+2).getUInt16(byteOrder = ByteOrder.BIG_ENDIAN).toInt()
                stringBuilder.append(String.format("%05d", value))
                stringBuilder.append("  ")
            }
            println(stringBuilder.toString())
        }
    }

    fun inRanges(idx: Int, ranges: List<IntRange>): Boolean {
        for (range in ranges) {
            if (range.contains(idx)) {
                return true
            }
        }
        return false
    }
}